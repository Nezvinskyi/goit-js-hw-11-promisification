{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","id","Math","floor","random","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GAMZ,OALgB,IAAIC,SAAQ,SAAAC,GAC1BC,YAAW,WACTD,EAAQF,KACPA,OAKDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAEnBC,EAAkB,SAACC,EAAUC,GAOjC,OANgB,IAAIb,SAAQ,SAAAC,GAI1BA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAO7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCnBnC,IAIMe,EAAkB,SAAAC,GAetB,OAdgB,IAAInB,SAAQ,SAACC,EAASmB,GACpC,IAN+BC,EAAKC,EAM9BC,EAAKJ,EAAYI,GACjBzB,GAPyBuB,EAOS,IAPJC,EAOS,IANxCE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAQlDnB,YAAW,WACUsB,KAAKE,SAAW,GAGjCzB,EAAQ,CAAEsB,KAAIzB,UAEdsB,EAAOG,KAERzB,OAKP,SAAS6B,EAAT,GAAyC,IAAnBJ,EAAmB,EAAnBA,GAAWnB,EAAQ,EAAfN,MACxBO,QAAQC,IAAR,eAA2BiB,EAA3B,iBAA8CnB,EAA9C,MAEF,IAAMwB,EAAW,SAAAL,GACflB,QAAQwB,KAAR,gCAA6CN,EAA7C,8BAGFL,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAC/DV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,K","file":"main.1d5c9fd5ae50dbfccaff.js","sourcesContent":["const delay = ms => {\n  const promise = new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n  return promise;\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger);\ndelay(1000).then(logger);\ndelay(1500).then(logger);\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\nconst toggleUserState = (allUsers, userName) => {\n  const promise = new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n  return promise;\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const promise = new Promise((resolve, reject) => {\n    const id = transaction.id;\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id, delay });\n      } else {\n        reject(id);\n      }\n    }, delay);\n  });\n  return promise;\n};\n\nfunction logSuccess({ id, delay: time }) {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n}\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}